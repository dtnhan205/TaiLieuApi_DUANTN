{"ast":null,"code":"var _jsxFileName = \"F:\\\\DU AN TN\\\\TAI LIEU API\\\\TaiLieuApi_DUANTN\\\\APIDOCS\\\\src\\\\components\\\\Users.js\";\nimport React from 'react';\nimport EndpointItem from './EndpointItem';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst User = ({\n  openEndpoint,\n  setOpenEndpoint\n}) => {\n  const endpoints = [{\n    method: 'POST',\n    path: '/api/users/register',\n    description: 'Register a new user',\n    fullDescription: 'Creates a new user account with required fields: username, phone, email, and password. Sends a welcome email with a 10% coupon code. Password is hashed before storage. No authentication required.',\n    auth: {\n      required: false,\n      description: 'No token required. This endpoint is publicly accessible.'\n    },\n    parameters: [{\n      name: 'username',\n      type: 'string',\n      description: 'Username of the user',\n      required: true\n    }, {\n      name: 'phone',\n      type: 'string',\n      description: 'Phone number (format: 0xxxxxxxxx)',\n      required: true\n    }, {\n      name: 'email',\n      type: 'string',\n      description: 'Email address (must be unique)',\n      required: true\n    }, {\n      name: 'password',\n      type: 'string',\n      description: 'Password (minimum 8 characters)',\n      required: true\n    }, {\n      name: 'address',\n      type: 'string',\n      description: 'User address',\n      required: false\n    }, {\n      name: 'birthday',\n      type: 'string',\n      description: 'Birthday (ISO date format)',\n      required: false\n    }, {\n      name: 'listOrder',\n      type: 'array',\n      description: 'Array of Order ObjectIds',\n      required: false\n    }],\n    requestExample: {\n      body: {\n        username: 'john_doe',\n        phone: '0987654321',\n        email: 'john.doe@example.com',\n        password: 'securepassword123',\n        address: '123 Main St, Hanoi',\n        birthday: '1990-01-01',\n        listOrder: []\n      }\n    },\n    response: {\n      status: 201,\n      description: 'User registered successfully',\n      example: {\n        message: 'Đăng ký thành công! Bạn có thể đăng nhập.',\n        user: {\n          _id: '60d5f8e9b1a2b4f8e8f9e2b0',\n          username: 'john_doe',\n          phone: '0987654321',\n          email: 'john.doe@example.com',\n          address: '123 Main St, Hanoi',\n          birthday: '1990-01-01T00:00:00Z',\n          listOrder: [],\n          status: 'active',\n          role: 'user',\n          createdAt: '2025-07-09T10:18:00Z'\n        }\n      }\n    },\n    errorResponses: [{\n      status: 400,\n      description: 'Missing required fields or invalid phone/email/password format'\n    }, {\n      status: 409,\n      description: 'Email already exists'\n    }, {\n      status: 500,\n      description: 'Server error'\n    }]\n  }, {\n    method: 'POST',\n    path: '/api/users/login',\n    description: 'Log in a user',\n    fullDescription: 'Authenticates a user with email and password, returning a JWT token valid for 1 hour. Checks if the account is active. No authentication required.',\n    auth: {\n      required: false,\n      description: 'No token required. This endpoint is publicly accessible.'\n    },\n    parameters: [{\n      name: 'email',\n      type: 'string',\n      description: 'User email',\n      required: true\n    }, {\n      name: 'password',\n      type: 'string',\n      description: 'User password',\n      required: true\n    }],\n    requestExample: {\n      body: {\n        email: 'john.doe@example.com',\n        password: 'securepassword123'\n      }\n    },\n    response: {\n      status: 200,\n      description: 'Login successful',\n      example: {\n        token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...',\n        message: 'Đăng nhập thành công',\n        user: {\n          id: '60d5f8e9b1a2b4f8e8f9e2b0',\n          email: 'john.doe@example.com',\n          username: 'john_doe',\n          role: 'user'\n        }\n      }\n    },\n    errorResponses: [{\n      status: 400,\n      description: 'Missing email or password'\n    }, {\n      status: 401,\n      description: 'Email does not exist or password incorrect'\n    }, {\n      status: 403,\n      description: 'Account is inactive or banned'\n    }, {\n      status: 500,\n      description: 'Server error'\n    }]\n  }, {\n    method: 'POST',\n    path: '/api/users/forgot-password',\n    description: 'Request password reset',\n    fullDescription: 'Sends a password reset email with a JWT token (valid for 1 hour) to the provided email. No authentication required.',\n    auth: {\n      required: false,\n      description: 'No token required. This endpoint is publicly accessible.'\n    },\n    parameters: [{\n      name: 'email',\n      type: 'string',\n      description: 'User email',\n      required: true\n    }],\n    requestExample: {\n      body: {\n        email: 'john.doe@example.com'\n      }\n    },\n    response: {\n      status: 200,\n      description: 'Password reset email sent',\n      example: {\n        message: 'Email đặt lại mật khẩu đã được gửi. Vui lòng kiểm tra hộp thư của bạn.'\n      }\n    },\n    errorResponses: [{\n      status: 400,\n      description: 'Missing or invalid email'\n    }, {\n      status: 404,\n      description: 'Email does not exist'\n    }, {\n      status: 500,\n      description: 'Error sending email or server error'\n    }]\n  }, {\n    method: 'POST',\n    path: '/api/users/reset-password/:token',\n    description: 'Reset password',\n    fullDescription: 'Resets the user password using a JWT token from the password reset email. Sends a confirmation email. No authentication required.',\n    auth: {\n      required: false,\n      description: 'No token required. This endpoint is publicly accessible.'\n    },\n    parameters: [{\n      name: 'token',\n      type: 'string',\n      description: 'JWT reset token',\n      required: true\n    }, {\n      name: 'newPassword',\n      type: 'string',\n      description: 'New password (minimum 8 characters)',\n      required: true\n    }],\n    requestExample: {\n      body: {\n        newPassword: 'newpassword123'\n      }\n    },\n    response: {\n      status: 200,\n      description: 'Password reset successful',\n      example: {\n        message: 'Đặt lại mật khẩu thành công!'\n      }\n    },\n    errorResponses: [{\n      status: 400,\n      description: 'Missing or invalid newPassword, or token invalid/expired'\n    }, {\n      status: 404,\n      description: 'Token does not match or user not found'\n    }, {\n      status: 500,\n      description: 'Server error'\n    }]\n  }, {\n    method: 'GET',\n    path: '/api/users/userinfo',\n    description: 'Get authenticated user info',\n    fullDescription: 'Returns information of the authenticated user, excluding sensitive fields like password. Requires a valid JWT token.',\n    auth: {\n      required: true,\n      header: 'Authorization: Bearer <token>',\n      description: 'JWT token of the user required in the header.'\n    },\n    parameters: [],\n    response: {\n      status: 200,\n      description: 'User information',\n      example: {\n        _id: '60d5f8e9b1a2b4f8e8f9e2b0',\n        username: 'john_doe',\n        phone: '0987654321',\n        email: 'john.doe@example.com',\n        address: '123 Main St, Hanoi',\n        birthday: '1990-01-01T00:00:00Z',\n        listOrder: [],\n        status: 'active',\n        role: 'user',\n        createdAt: '2025-07-09T10:18:00Z'\n      }\n    },\n    errorResponses: [{\n      status: 401,\n      description: 'No token or invalid/expired token'\n    }, {\n      status: 404,\n      description: 'User not found'\n    }, {\n      status: 500,\n      description: 'Server error'\n    }]\n  }, {\n    method: 'GET',\n    path: '/api/users',\n    description: 'Get all users',\n    fullDescription: 'Returns a list of all users, excluding sensitive fields like password. Requires admin privileges and a valid JWT token.',\n    auth: {\n      required: true,\n      header: 'Authorization: Bearer <token>',\n      description: 'JWT token of an admin required in the header.'\n    },\n    parameters: [],\n    response: {\n      status: 200,\n      description: 'List of all users',\n      example: [{\n        _id: '60d5f8e9b1a2b4f8e8f9e2b0',\n        username: 'john_doe',\n        phone: '0987654321',\n        email: 'john.doe@example.com',\n        address: '123 Main St, Hanoi',\n        birthday: '1990-01-01T00:00:00Z',\n        listOrder: [],\n        status: 'active',\n        role: 'user',\n        createdAt: '2025-07-09T10:18:00Z'\n      }]\n    },\n    errorResponses: [{\n      status: 401,\n      description: 'No token or invalid/expired token'\n    }, {\n      status: 403,\n      description: 'Not an admin'\n    }, {\n      status: 404,\n      description: 'No users found'\n    }, {\n      status: 500,\n      description: 'Server error'\n    }]\n  }, {\n    method: 'GET',\n    path: '/api/users/:id',\n    description: 'Get user by ID',\n    fullDescription: 'Returns details of a user by ID, excluding sensitive fields like password. Requires admin privileges and a valid JWT token.',\n    auth: {\n      required: true,\n      header: 'Authorization: Bearer <token>',\n      description: 'JWT token of an admin required in the header.'\n    },\n    parameters: [{\n      name: 'id',\n      type: 'string',\n      description: 'ObjectId of the user',\n      required: true\n    }],\n    response: {\n      status: 200,\n      description: 'User details',\n      example: {\n        _id: '60d5f8e9b1a2b4f8e8f9e2b0',\n        username: 'john_doe',\n        phone: '0987654321',\n        email: 'john.doe@example.com',\n        address: '123 Main St, Hanoi',\n        birthday: '1990-01-01T00:00:00Z',\n        listOrder: [],\n        status: 'active',\n        role: 'user',\n        createdAt: '2025-07-09T10:18:00Z'\n      }\n    },\n    errorResponses: [{\n      status: 401,\n      description: 'No token or invalid/expired token'\n    }, {\n      status: 403,\n      description: 'Not an admin'\n    }, {\n      status: 404,\n      description: 'User not found'\n    }, {\n      status: 500,\n      description: 'Server error'\n    }]\n  }, {\n    method: 'PUT',\n    path: '/api/users/update/:id',\n    description: 'Update user information',\n    fullDescription: 'Updates user information such as username, phone, email, address, birthday, status, or role. Users can update their own data, or admins can update any user. Requires a valid JWT token.',\n    auth: {\n      required: true,\n      header: 'Authorization: Bearer <token>',\n      description: 'JWT token of the user or admin required in the header.'\n    },\n    parameters: [{\n      name: 'id',\n      type: 'string',\n      description: 'ObjectId of the user',\n      required: true\n    }, {\n      name: 'username',\n      type: 'string',\n      description: 'New username',\n      required: false\n    }, {\n      name: 'phone',\n      type: 'string',\n      description: 'New phone number (format: 0xxxxxxxxx)',\n      required: false\n    }, {\n      name: 'email',\n      type: 'string',\n      description: 'New email address',\n      required: false\n    }, {\n      name: 'address',\n      type: 'string',\n      description: 'New address',\n      required: false\n    }, {\n      name: 'birthday',\n      type: 'string',\n      description: 'New birthday (ISO date format)',\n      required: false\n    }, {\n      name: 'status',\n      type: 'string',\n      description: 'New status (active, inactive, banned)',\n      required: false\n    }, {\n      name: 'role',\n      type: 'string',\n      description: 'New role (user, admin)',\n      required: false\n    }],\n    requestExample: {\n      headers: {\n        'Authorization': 'Bearer <token>'\n      },\n      body: {\n        username: 'john_doe_updated',\n        phone: '0912345678',\n        email: 'john.doe.new@example.com',\n        address: '456 New St, Hanoi',\n        birthday: '1990-01-02',\n        status: 'active',\n        role: 'user'\n      }\n    },\n    response: {\n      status: 200,\n      description: 'User updated successfully',\n      example: {\n        message: 'Cập nhật thành công',\n        user: {\n          _id: '60d5f8e9b1a2b4f8e8f9e2b0',\n          username: 'john_doe_updated',\n          phone: '0912345678',\n          email: 'john.doe.new@example.com',\n          address: '456 New St, Hanoi',\n          birthday: '1990-01-02T00:00:00Z',\n          listOrder: [],\n          status: 'active',\n          role: 'user',\n          createdAt: '2025-07-09T10:18:00Z'\n        }\n      }\n    },\n    errorResponses: [{\n      status: 401,\n      description: 'No token or invalid/expired token'\n    }, {\n      status: 403,\n      description: 'User does not have permission to update this user'\n    }, {\n      status: 404,\n      description: 'User not found'\n    }, {\n      status: 500,\n      description: 'Server error'\n    }]\n  }, {\n    method: 'DELETE',\n    path: '/api/users/:id',\n    description: 'Delete a user',\n    fullDescription: 'Deletes a user by ID. Only admins can delete users. Requires a valid JWT token.',\n    auth: {\n      required: true,\n      header: 'Authorization: Bearer <token>',\n      description: 'JWT token of an admin required in the header.'\n    },\n    parameters: [{\n      name: 'id',\n      type: 'string',\n      description: 'ObjectId of the user',\n      required: true\n    }],\n    response: {\n      status: 200,\n      description: 'User deleted successfully',\n      example: {\n        message: 'Xóa người dùng thành công'\n      }\n    },\n    errorResponses: [{\n      status: 401,\n      description: 'No token or invalid/expired token'\n    }, {\n      status: 403,\n      description: 'Not an admin or no permission'\n    }, {\n      status: 404,\n      description: 'User not found'\n    }, {\n      status: 500,\n      description: 'Server error'\n    }]\n  }, {\n    method: 'PUT',\n    path: '/api/users/change-password/:id',\n    description: 'Change user password',\n    fullDescription: 'Changes the user password after verifying the old password. Sends a confirmation email. Users can change their own password, or admins can change any user’s password. Requires a valid JWT token.',\n    auth: {\n      required: true,\n      header: 'Authorization: Bearer <token>',\n      description: 'JWT token of the user or admin required in the header.'\n    },\n    parameters: [{\n      name: 'id',\n      type: 'string',\n      description: 'ObjectId of the user',\n      required: true\n    }, {\n      name: 'oldPassword',\n      type: 'string',\n      description: 'Current password',\n      required: true\n    }, {\n      name: 'newPassword',\n      type: 'string',\n      description: 'New password (minimum 8 characters)',\n      required: true\n    }],\n    requestExample: {\n      headers: {\n        'Authorization': 'Bearer <token>'\n      },\n      body: {\n        oldPassword: 'securepassword123',\n        newPassword: 'newpassword123'\n      }\n    },\n    response: {\n      status: 200,\n      description: 'Password changed successfully',\n      example: {\n        message: 'Đổi mật khẩu thành công'\n      }\n    },\n    errorResponses: [{\n      status: 400,\n      description: 'Missing oldPassword/newPassword or newPassword too short'\n    }, {\n      status: 401,\n      description: 'Old password incorrect'\n    }, {\n      status: 403,\n      description: 'User does not have permission to change this password'\n    }, {\n      status: 404,\n      description: 'User not found'\n    }, {\n      status: 500,\n      description: 'Server error'\n    }]\n  }, {\n    method: 'GET',\n    path: '/api/users/google',\n    description: 'Initiate Google OAuth login',\n    fullDescription: 'Redirects to Google’s OAuth 2.0 authorization page to authenticate the user. No authentication required.',\n    auth: {\n      required: false,\n      description: 'No token required. This endpoint is publicly accessible.'\n    },\n    parameters: [],\n    response: {\n      status: 302,\n      description: 'Redirect to Google OAuth page',\n      example: {\n        redirect: 'https://accounts.google.com/o/oauth2/auth?client_id=...&redirect_uri=...&scope=...&response_type=code'\n      }\n    },\n    errorResponses: [{\n      status: 500,\n      description: 'Server error'\n    }]\n  }, {\n    method: 'GET',\n    path: '/api/users/google/callback',\n    description: 'Handle Google OAuth callback',\n    fullDescription: 'Handles the callback from Google OAuth, authenticates the user, and typically redirects with a JWT token or to a frontend page. No authentication required.',\n    auth: {\n      required: false,\n      description: 'No token required. This endpoint is publicly accessible.'\n    },\n    parameters: [{\n      name: 'code',\n      type: 'string',\n      description: 'Authorization code from Google',\n      required: true,\n      in: 'query'\n    }],\n    response: {\n      status: 302,\n      description: 'Redirect to frontend with token or success page',\n      example: {\n        redirect: 'https://purebotanica.com/auth/success?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'\n      }\n    },\n    errorResponses: [{\n      status: 400,\n      description: 'Invalid or missing authorization code'\n    }, {\n      status: 500,\n      description: 'Server error'\n    }]\n  }];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: endpoints.map((endpoint, index) => /*#__PURE__*/_jsxDEV(EndpointItem, {\n      endpoint: endpoint,\n      index: index,\n      openEndpoint: openEndpoint,\n      setOpenEndpoint: setOpenEndpoint\n    }, `${endpoint.path}-${index}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 438,\n      columnNumber: 9\n    }, this))\n  }, void 0, false);\n};\n_c = User;\nexport default User;\nvar _c;\n$RefreshReg$(_c, \"User\");","map":{"version":3,"names":["React","EndpointItem","jsxDEV","_jsxDEV","Fragment","_Fragment","User","openEndpoint","setOpenEndpoint","endpoints","method","path","description","fullDescription","auth","required","parameters","name","type","requestExample","body","username","phone","email","password","address","birthday","listOrder","response","status","example","message","user","_id","role","createdAt","errorResponses","token","id","newPassword","header","headers","oldPassword","redirect","in","children","map","endpoint","index","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["F:/DU AN TN/TAI LIEU API/TaiLieuApi_DUANTN/APIDOCS/src/components/Users.js"],"sourcesContent":["import React from 'react';\r\nimport EndpointItem from './EndpointItem';\r\n\r\nconst User = ({ openEndpoint, setOpenEndpoint }) => {\r\n  const endpoints = [\r\n    {\r\n      method: 'POST',\r\n      path: '/api/users/register',\r\n      description: 'Register a new user',\r\n      fullDescription: 'Creates a new user account with required fields: username, phone, email, and password. Sends a welcome email with a 10% coupon code. Password is hashed before storage. No authentication required.',\r\n      auth: {\r\n        required: false,\r\n        description: 'No token required. This endpoint is publicly accessible.'\r\n      },\r\n      parameters: [\r\n        { name: 'username', type: 'string', description: 'Username of the user', required: true },\r\n        { name: 'phone', type: 'string', description: 'Phone number (format: 0xxxxxxxxx)', required: true },\r\n        { name: 'email', type: 'string', description: 'Email address (must be unique)', required: true },\r\n        { name: 'password', type: 'string', description: 'Password (minimum 8 characters)', required: true },\r\n        { name: 'address', type: 'string', description: 'User address', required: false },\r\n        { name: 'birthday', type: 'string', description: 'Birthday (ISO date format)', required: false },\r\n        { name: 'listOrder', type: 'array', description: 'Array of Order ObjectIds', required: false }\r\n      ],\r\n      requestExample: {\r\n        body: {\r\n          username: 'john_doe',\r\n          phone: '0987654321',\r\n          email: 'john.doe@example.com',\r\n          password: 'securepassword123',\r\n          address: '123 Main St, Hanoi',\r\n          birthday: '1990-01-01',\r\n          listOrder: []\r\n        }\r\n      },\r\n      response: {\r\n        status: 201,\r\n        description: 'User registered successfully',\r\n        example: {\r\n          message: 'Đăng ký thành công! Bạn có thể đăng nhập.',\r\n          user: {\r\n            _id: '60d5f8e9b1a2b4f8e8f9e2b0',\r\n            username: 'john_doe',\r\n            phone: '0987654321',\r\n            email: 'john.doe@example.com',\r\n            address: '123 Main St, Hanoi',\r\n            birthday: '1990-01-01T00:00:00Z',\r\n            listOrder: [],\r\n            status: 'active',\r\n            role: 'user',\r\n            createdAt: '2025-07-09T10:18:00Z'\r\n          }\r\n        }\r\n      },\r\n      errorResponses: [\r\n        { status: 400, description: 'Missing required fields or invalid phone/email/password format' },\r\n        { status: 409, description: 'Email already exists' },\r\n        { status: 500, description: 'Server error' }\r\n      ]\r\n    },\r\n    {\r\n      method: 'POST',\r\n      path: '/api/users/login',\r\n      description: 'Log in a user',\r\n      fullDescription: 'Authenticates a user with email and password, returning a JWT token valid for 1 hour. Checks if the account is active. No authentication required.',\r\n      auth: {\r\n        required: false,\r\n        description: 'No token required. This endpoint is publicly accessible.'\r\n      },\r\n      parameters: [\r\n        { name: 'email', type: 'string', description: 'User email', required: true },\r\n        { name: 'password', type: 'string', description: 'User password', required: true }\r\n      ],\r\n      requestExample: {\r\n        body: {\r\n          email: 'john.doe@example.com',\r\n          password: 'securepassword123'\r\n        }\r\n      },\r\n      response: {\r\n        status: 200,\r\n        description: 'Login successful',\r\n        example: {\r\n          token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...',\r\n          message: 'Đăng nhập thành công',\r\n          user: {\r\n            id: '60d5f8e9b1a2b4f8e8f9e2b0',\r\n            email: 'john.doe@example.com',\r\n            username: 'john_doe',\r\n            role: 'user'\r\n          }\r\n        }\r\n      },\r\n      errorResponses: [\r\n        { status: 400, description: 'Missing email or password' },\r\n        { status: 401, description: 'Email does not exist or password incorrect' },\r\n        { status: 403, description: 'Account is inactive or banned' },\r\n        { status: 500, description: 'Server error' }\r\n      ]\r\n    },\r\n    {\r\n      method: 'POST',\r\n      path: '/api/users/forgot-password',\r\n      description: 'Request password reset',\r\n      fullDescription: 'Sends a password reset email with a JWT token (valid for 1 hour) to the provided email. No authentication required.',\r\n      auth: {\r\n        required: false,\r\n        description: 'No token required. This endpoint is publicly accessible.'\r\n      },\r\n      parameters: [\r\n        { name: 'email', type: 'string', description: 'User email', required: true }\r\n      ],\r\n      requestExample: {\r\n        body: {\r\n          email: 'john.doe@example.com'\r\n        }\r\n      },\r\n      response: {\r\n        status: 200,\r\n        description: 'Password reset email sent',\r\n        example: {\r\n          message: 'Email đặt lại mật khẩu đã được gửi. Vui lòng kiểm tra hộp thư của bạn.'\r\n        }\r\n      },\r\n      errorResponses: [\r\n        { status: 400, description: 'Missing or invalid email' },\r\n        { status: 404, description: 'Email does not exist' },\r\n        { status: 500, description: 'Error sending email or server error' }\r\n      ]\r\n    },\r\n    {\r\n      method: 'POST',\r\n      path: '/api/users/reset-password/:token',\r\n      description: 'Reset password',\r\n      fullDescription: 'Resets the user password using a JWT token from the password reset email. Sends a confirmation email. No authentication required.',\r\n      auth: {\r\n        required: false,\r\n        description: 'No token required. This endpoint is publicly accessible.'\r\n      },\r\n      parameters: [\r\n        { name: 'token', type: 'string', description: 'JWT reset token', required: true },\r\n        { name: 'newPassword', type: 'string', description: 'New password (minimum 8 characters)', required: true }\r\n      ],\r\n      requestExample: {\r\n        body: {\r\n          newPassword: 'newpassword123'\r\n        }\r\n      },\r\n      response: {\r\n        status: 200,\r\n        description: 'Password reset successful',\r\n        example: {\r\n          message: 'Đặt lại mật khẩu thành công!'\r\n        }\r\n      },\r\n      errorResponses: [\r\n        { status: 400, description: 'Missing or invalid newPassword, or token invalid/expired' },\r\n        { status: 404, description: 'Token does not match or user not found' },\r\n        { status: 500, description: 'Server error' }\r\n      ]\r\n    },\r\n    {\r\n      method: 'GET',\r\n      path: '/api/users/userinfo',\r\n      description: 'Get authenticated user info',\r\n      fullDescription: 'Returns information of the authenticated user, excluding sensitive fields like password. Requires a valid JWT token.',\r\n      auth: {\r\n        required: true,\r\n        header: 'Authorization: Bearer <token>',\r\n        description: 'JWT token of the user required in the header.'\r\n      },\r\n      parameters: [],\r\n      response: {\r\n        status: 200,\r\n        description: 'User information',\r\n        example: {\r\n          _id: '60d5f8e9b1a2b4f8e8f9e2b0',\r\n          username: 'john_doe',\r\n          phone: '0987654321',\r\n          email: 'john.doe@example.com',\r\n          address: '123 Main St, Hanoi',\r\n          birthday: '1990-01-01T00:00:00Z',\r\n          listOrder: [],\r\n          status: 'active',\r\n          role: 'user',\r\n          createdAt: '2025-07-09T10:18:00Z'\r\n        }\r\n      },\r\n      errorResponses: [\r\n        { status: 401, description: 'No token or invalid/expired token' },\r\n        { status: 404, description: 'User not found' },\r\n        { status: 500, description: 'Server error' }\r\n      ]\r\n    },\r\n    {\r\n      method: 'GET',\r\n      path: '/api/users',\r\n      description: 'Get all users',\r\n      fullDescription: 'Returns a list of all users, excluding sensitive fields like password. Requires admin privileges and a valid JWT token.',\r\n      auth: {\r\n        required: true,\r\n        header: 'Authorization: Bearer <token>',\r\n        description: 'JWT token of an admin required in the header.'\r\n      },\r\n      parameters: [],\r\n      response: {\r\n        status: 200,\r\n        description: 'List of all users',\r\n        example: [\r\n          {\r\n            _id: '60d5f8e9b1a2b4f8e8f9e2b0',\r\n            username: 'john_doe',\r\n            phone: '0987654321',\r\n            email: 'john.doe@example.com',\r\n            address: '123 Main St, Hanoi',\r\n            birthday: '1990-01-01T00:00:00Z',\r\n            listOrder: [],\r\n            status: 'active',\r\n            role: 'user',\r\n            createdAt: '2025-07-09T10:18:00Z'\r\n          }\r\n        ]\r\n      },\r\n      errorResponses: [\r\n        { status: 401, description: 'No token or invalid/expired token' },\r\n        { status: 403, description: 'Not an admin' },\r\n        { status: 404, description: 'No users found' },\r\n        { status: 500, description: 'Server error' }\r\n      ]\r\n    },\r\n    {\r\n      method: 'GET',\r\n      path: '/api/users/:id',\r\n      description: 'Get user by ID',\r\n      fullDescription: 'Returns details of a user by ID, excluding sensitive fields like password. Requires admin privileges and a valid JWT token.',\r\n      auth: {\r\n        required: true,\r\n        header: 'Authorization: Bearer <token>',\r\n        description: 'JWT token of an admin required in the header.'\r\n      },\r\n      parameters: [\r\n        { name: 'id', type: 'string', description: 'ObjectId of the user', required: true }\r\n      ],\r\n      response: {\r\n        status: 200,\r\n        description: 'User details',\r\n        example: {\r\n          _id: '60d5f8e9b1a2b4f8e8f9e2b0',\r\n          username: 'john_doe',\r\n          phone: '0987654321',\r\n          email: 'john.doe@example.com',\r\n          address: '123 Main St, Hanoi',\r\n          birthday: '1990-01-01T00:00:00Z',\r\n          listOrder: [],\r\n          status: 'active',\r\n          role: 'user',\r\n          createdAt: '2025-07-09T10:18:00Z'\r\n        }\r\n      },\r\n      errorResponses: [\r\n        { status: 401, description: 'No token or invalid/expired token' },\r\n        { status: 403, description: 'Not an admin' },\r\n        { status: 404, description: 'User not found' },\r\n        { status: 500, description: 'Server error' }\r\n      ]\r\n    },\r\n    {\r\n      method: 'PUT',\r\n      path: '/api/users/update/:id',\r\n      description: 'Update user information',\r\n      fullDescription: 'Updates user information such as username, phone, email, address, birthday, status, or role. Users can update their own data, or admins can update any user. Requires a valid JWT token.',\r\n      auth: {\r\n        required: true,\r\n        header: 'Authorization: Bearer <token>',\r\n        description: 'JWT token of the user or admin required in the header.'\r\n      },\r\n      parameters: [\r\n        { name: 'id', type: 'string', description: 'ObjectId of the user', required: true },\r\n        { name: 'username', type: 'string', description: 'New username', required: false },\r\n        { name: 'phone', type: 'string', description: 'New phone number (format: 0xxxxxxxxx)', required: false },\r\n        { name: 'email', type: 'string', description: 'New email address', required: false },\r\n        { name: 'address', type: 'string', description: 'New address', required: false },\r\n        { name: 'birthday', type: 'string', description: 'New birthday (ISO date format)', required: false },\r\n        { name: 'status', type: 'string', description: 'New status (active, inactive, banned)', required: false },\r\n        { name: 'role', type: 'string', description: 'New role (user, admin)', required: false }\r\n      ],\r\n      requestExample: {\r\n        headers: { 'Authorization': 'Bearer <token>' },\r\n        body: {\r\n          username: 'john_doe_updated',\r\n          phone: '0912345678',\r\n          email: 'john.doe.new@example.com',\r\n          address: '456 New St, Hanoi',\r\n          birthday: '1990-01-02',\r\n          status: 'active',\r\n          role: 'user'\r\n        }\r\n      },\r\n      response: {\r\n        status: 200,\r\n        description: 'User updated successfully',\r\n        example: {\r\n          message: 'Cập nhật thành công',\r\n          user: {\r\n            _id: '60d5f8e9b1a2b4f8e8f9e2b0',\r\n            username: 'john_doe_updated',\r\n            phone: '0912345678',\r\n            email: 'john.doe.new@example.com',\r\n            address: '456 New St, Hanoi',\r\n            birthday: '1990-01-02T00:00:00Z',\r\n            listOrder: [],\r\n            status: 'active',\r\n            role: 'user',\r\n            createdAt: '2025-07-09T10:18:00Z'\r\n          }\r\n        }\r\n      },\r\n      errorResponses: [\r\n        { status: 401, description: 'No token or invalid/expired token' },\r\n        { status: 403, description: 'User does not have permission to update this user' },\r\n        { status: 404, description: 'User not found' },\r\n        { status: 500, description: 'Server error' }\r\n      ]\r\n    },\r\n    {\r\n      method: 'DELETE',\r\n      path: '/api/users/:id',\r\n      description: 'Delete a user',\r\n      fullDescription: 'Deletes a user by ID. Only admins can delete users. Requires a valid JWT token.',\r\n      auth: {\r\n        required: true,\r\n        header: 'Authorization: Bearer <token>',\r\n        description: 'JWT token of an admin required in the header.'\r\n      },\r\n      parameters: [\r\n        { name: 'id', type: 'string', description: 'ObjectId of the user', required: true }\r\n      ],\r\n      response: {\r\n        status: 200,\r\n        description: 'User deleted successfully',\r\n        example: {\r\n          message: 'Xóa người dùng thành công'\r\n        }\r\n      },\r\n      errorResponses: [\r\n        { status: 401, description: 'No token or invalid/expired token' },\r\n        { status: 403, description: 'Not an admin or no permission' },\r\n        { status: 404, description: 'User not found' },\r\n        { status: 500, description: 'Server error' }\r\n      ]\r\n    },\r\n    {\r\n      method: 'PUT',\r\n      path: '/api/users/change-password/:id',\r\n      description: 'Change user password',\r\n      fullDescription: 'Changes the user password after verifying the old password. Sends a confirmation email. Users can change their own password, or admins can change any user’s password. Requires a valid JWT token.',\r\n      auth: {\r\n        required: true,\r\n        header: 'Authorization: Bearer <token>',\r\n        description: 'JWT token of the user or admin required in the header.'\r\n      },\r\n      parameters: [\r\n        { name: 'id', type: 'string', description: 'ObjectId of the user', required: true },\r\n        { name: 'oldPassword', type: 'string', description: 'Current password', required: true },\r\n        { name: 'newPassword', type: 'string', description: 'New password (minimum 8 characters)', required: true }\r\n      ],\r\n      requestExample: {\r\n        headers: { 'Authorization': 'Bearer <token>' },\r\n        body: {\r\n          oldPassword: 'securepassword123',\r\n          newPassword: 'newpassword123'\r\n        }\r\n      },\r\n      response: {\r\n        status: 200,\r\n        description: 'Password changed successfully',\r\n        example: {\r\n          message: 'Đổi mật khẩu thành công'\r\n        }\r\n      },\r\n      errorResponses: [\r\n        { status: 400, description: 'Missing oldPassword/newPassword or newPassword too short' },\r\n        { status: 401, description: 'Old password incorrect' },\r\n        { status: 403, description: 'User does not have permission to change this password' },\r\n        { status: 404, description: 'User not found' },\r\n        { status: 500, description: 'Server error' }\r\n      ]\r\n    },\r\n    {\r\n      method: 'GET',\r\n      path: '/api/users/google',\r\n      description: 'Initiate Google OAuth login',\r\n      fullDescription: 'Redirects to Google’s OAuth 2.0 authorization page to authenticate the user. No authentication required.',\r\n      auth: {\r\n        required: false,\r\n        description: 'No token required. This endpoint is publicly accessible.'\r\n      },\r\n      parameters: [],\r\n      response: {\r\n        status: 302,\r\n        description: 'Redirect to Google OAuth page',\r\n        example: {\r\n          redirect: 'https://accounts.google.com/o/oauth2/auth?client_id=...&redirect_uri=...&scope=...&response_type=code'\r\n        }\r\n      },\r\n      errorResponses: [\r\n        { status: 500, description: 'Server error' }\r\n      ]\r\n    },\r\n    {\r\n      method: 'GET',\r\n      path: '/api/users/google/callback',\r\n      description: 'Handle Google OAuth callback',\r\n      fullDescription: 'Handles the callback from Google OAuth, authenticates the user, and typically redirects with a JWT token or to a frontend page. No authentication required.',\r\n      auth: {\r\n        required: false,\r\n        description: 'No token required. This endpoint is publicly accessible.'\r\n      },\r\n      parameters: [\r\n        { name: 'code', type: 'string', description: 'Authorization code from Google', required: true, in: 'query' }\r\n      ],\r\n      response: {\r\n        status: 302,\r\n        description: 'Redirect to frontend with token or success page',\r\n        example: {\r\n          redirect: 'https://purebotanica.com/auth/success?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'\r\n        }\r\n      },\r\n      errorResponses: [\r\n        { status: 400, description: 'Invalid or missing authorization code' },\r\n        { status: 500, description: 'Server error' }\r\n      ]\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      {endpoints.map((endpoint, index) => (\r\n        <EndpointItem\r\n          key={`${endpoint.path}-${index}`}\r\n          endpoint={endpoint}\r\n          index={index}\r\n          openEndpoint={openEndpoint}\r\n          setOpenEndpoint={setOpenEndpoint}\r\n        />\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default User;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"F:\\\\DU AN TN\\\\TAI LIEU API\\\\TaiLieuApi_DUANTN\\\\APIDOCS\\\\src\\\\components\\\\Auth.js\";\nimport React from 'react';\nimport EndpointItem from './EndpointItem';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst GoogleAuth = ({\n  openEndpoint,\n  setOpenEndpoint\n}) => {\n  const endpoints = [{\n    method: 'GET',\n    path: '/auth/google',\n    description: 'Khởi tạo đăng nhập bằng Google',\n    fullDescription: 'Chuyển hướng người dùng đến trang xác thực của Google để đăng nhập, yêu cầu quyền truy cập vào thông tin `profile` và `email`. Endpoint này sử dụng session để lưu trạng thái đăng nhập. Không yêu cầu xác thực trước.',\n    auth: {\n      required: false,\n      description: 'Không yêu cầu xác thực trước. Endpoint này khởi tạo quy trình đăng nhập Google.'\n    },\n    parameters: [],\n    response: {\n      status: 302,\n      description: 'Chuyển hướng đến trang đăng nhập Google',\n      example: null // Không có body trả về vì đây là chuyển hướng\n    },\n    errorResponses: [{\n      status: 500,\n      description: 'Lỗi máy chủ khi khởi tạo đăng nhập'\n    }]\n  }, {\n    method: 'GET',\n    path: '/auth/google/callback',\n    description: 'Xử lý callback đăng nhập Google',\n    fullDescription: 'Xử lý callback từ Google sau khi người dùng xác thực. Tạo token JWT chứa thông tin `id`, `email`, và `role` của người dùng, sau đó chuyển hướng đến URL frontend (mặc định là `/user/login` hoặc URL được cung cấp qua query `callback`) kèm token trong query string.',\n    auth: {\n      required: false,\n      description: 'Không yêu cầu xác thực trước, nhưng Google sẽ yêu cầu người dùng đăng nhập. Endpoint này sử dụng session để xác thực.'\n    },\n    parameters: [{\n      name: 'callback',\n      type: 'string',\n      description: 'URL tùy chọn để chuyển hướng sau khi đăng nhập thành công (mặc định: `http://localhost:3000/user/login`)',\n      required: false\n    }],\n    response: {\n      status: 302,\n      description: 'Chuyển hướng đến URL frontend kèm token JWT trong query string',\n      example: {\n        redirect: 'http://localhost:3000/user/login?token=<jwt_token>'\n      }\n    },\n    errorResponses: [{\n      status: 401,\n      description: 'Lỗi xác thực, thông tin người dùng không hợp lệ'\n    }, {\n      status: 500,\n      description: 'Lỗi máy chủ khi xử lý callback'\n    }]\n  }, {\n    method: 'GET',\n    path: '/logout',\n    description: 'Đăng xuất người dùng',\n    fullDescription: 'Đăng xuất người dùng, xóa session hiện tại và chuyển hướng về URL gốc (mặc định: `http://localhost:3000` hoặc giá trị `BASE_URL` trong biến môi trường).',\n    auth: {\n      required: false,\n      description: 'Không yêu cầu xác thực trước, nhưng session phải tồn tại để đăng xuất.'\n    },\n    parameters: [],\n    response: {\n      status: 302,\n      description: 'Chuyển hướng về URL gốc',\n      example: {\n        redirect: 'http://localhost:3000'\n      }\n    },\n    errorResponses: [{\n      status: 500,\n      description: 'Lỗi máy chủ khi đăng xuất hoặc xóa session'\n    }]\n  }];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: endpoints.map((endpoint, index) => /*#__PURE__*/_jsxDEV(EndpointItem, {\n      endpoint: endpoint,\n      index: index,\n      openEndpoint: openEndpoint,\n      setOpenEndpoint: setOpenEndpoint\n    }, `${endpoint.path}-${index}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this))\n  }, void 0, false);\n};\n_c = GoogleAuth;\nexport default GoogleAuth;\nvar _c;\n$RefreshReg$(_c, \"GoogleAuth\");","map":{"version":3,"names":["React","EndpointItem","jsxDEV","_jsxDEV","Fragment","_Fragment","GoogleAuth","openEndpoint","setOpenEndpoint","endpoints","method","path","description","fullDescription","auth","required","parameters","response","status","example","errorResponses","name","type","redirect","children","map","endpoint","index","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["F:/DU AN TN/TAI LIEU API/TaiLieuApi_DUANTN/APIDOCS/src/components/Auth.js"],"sourcesContent":["import React from 'react';\r\nimport EndpointItem from './EndpointItem';\r\n\r\nconst GoogleAuth = ({ openEndpoint, setOpenEndpoint }) => {\r\n  const endpoints = [\r\n    {\r\n      method: 'GET',\r\n      path: '/auth/google',\r\n      description: 'Khởi tạo đăng nhập bằng Google',\r\n      fullDescription: 'Chuyển hướng người dùng đến trang xác thực của Google để đăng nhập, yêu cầu quyền truy cập vào thông tin `profile` và `email`. Endpoint này sử dụng session để lưu trạng thái đăng nhập. Không yêu cầu xác thực trước.',\r\n      auth: {\r\n        required: false,\r\n        description: 'Không yêu cầu xác thực trước. Endpoint này khởi tạo quy trình đăng nhập Google.'\r\n      },\r\n      parameters: [],\r\n      response: {\r\n        status: 302,\r\n        description: 'Chuyển hướng đến trang đăng nhập Google',\r\n        example: null // Không có body trả về vì đây là chuyển hướng\r\n      },\r\n      errorResponses: [\r\n        { status: 500, description: 'Lỗi máy chủ khi khởi tạo đăng nhập' }\r\n      ]\r\n    },\r\n    {\r\n      method: 'GET',\r\n      path: '/auth/google/callback',\r\n      description: 'Xử lý callback đăng nhập Google',\r\n      fullDescription: 'Xử lý callback từ Google sau khi người dùng xác thực. Tạo token JWT chứa thông tin `id`, `email`, và `role` của người dùng, sau đó chuyển hướng đến URL frontend (mặc định là `/user/login` hoặc URL được cung cấp qua query `callback`) kèm token trong query string.',\r\n      auth: {\r\n        required: false,\r\n        description: 'Không yêu cầu xác thực trước, nhưng Google sẽ yêu cầu người dùng đăng nhập. Endpoint này sử dụng session để xác thực.'\r\n      },\r\n      parameters: [\r\n        {\r\n          name: 'callback',\r\n          type: 'string',\r\n          description: 'URL tùy chọn để chuyển hướng sau khi đăng nhập thành công (mặc định: `http://localhost:3000/user/login`)',\r\n          required: false\r\n        }\r\n      ],\r\n      response: {\r\n        status: 302,\r\n        description: 'Chuyển hướng đến URL frontend kèm token JWT trong query string',\r\n        example: {\r\n          redirect: 'http://localhost:3000/user/login?token=<jwt_token>'\r\n        }\r\n      },\r\n      errorResponses: [\r\n        { status: 401, description: 'Lỗi xác thực, thông tin người dùng không hợp lệ' },\r\n        { status: 500, description: 'Lỗi máy chủ khi xử lý callback' }\r\n      ]\r\n    },\r\n    {\r\n      method: 'GET',\r\n      path: '/logout',\r\n      description: 'Đăng xuất người dùng',\r\n      fullDescription: 'Đăng xuất người dùng, xóa session hiện tại và chuyển hướng về URL gốc (mặc định: `http://localhost:3000` hoặc giá trị `BASE_URL` trong biến môi trường).',\r\n      auth: {\r\n        required: false,\r\n        description: 'Không yêu cầu xác thực trước, nhưng session phải tồn tại để đăng xuất.'\r\n      },\r\n      parameters: [],\r\n      response: {\r\n        status: 302,\r\n        description: 'Chuyển hướng về URL gốc',\r\n        example: {\r\n          redirect: 'http://localhost:3000'\r\n        }\r\n      },\r\n      errorResponses: [\r\n        { status: 500, description: 'Lỗi máy chủ khi đăng xuất hoặc xóa session' }\r\n      ]\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      {endpoints.map((endpoint, index) => (\r\n        <EndpointItem\r\n          key={`${endpoint.path}-${index}`}\r\n          endpoint={endpoint}\r\n          index={index}\r\n          openEndpoint={openEndpoint}\r\n          setOpenEndpoint={setOpenEndpoint}\r\n        />\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GoogleAuth;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,YAAY,MAAM,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE1C,MAAMC,UAAU,GAAGA,CAAC;EAAEC,YAAY;EAAEC;AAAgB,CAAC,KAAK;EACxD,MAAMC,SAAS,GAAG,CAChB;IACEC,MAAM,EAAE,KAAK;IACbC,IAAI,EAAE,cAAc;IACpBC,WAAW,EAAE,gCAAgC;IAC7CC,eAAe,EAAE,wNAAwN;IACzOC,IAAI,EAAE;MACJC,QAAQ,EAAE,KAAK;MACfH,WAAW,EAAE;IACf,CAAC;IACDI,UAAU,EAAE,EAAE;IACdC,QAAQ,EAAE;MACRC,MAAM,EAAE,GAAG;MACXN,WAAW,EAAE,yCAAyC;MACtDO,OAAO,EAAE,IAAI,CAAC;IAChB,CAAC;IACDC,cAAc,EAAE,CACd;MAAEF,MAAM,EAAE,GAAG;MAAEN,WAAW,EAAE;IAAqC,CAAC;EAEtE,CAAC,EACD;IACEF,MAAM,EAAE,KAAK;IACbC,IAAI,EAAE,uBAAuB;IAC7BC,WAAW,EAAE,iCAAiC;IAC9CC,eAAe,EAAE,wQAAwQ;IACzRC,IAAI,EAAE;MACJC,QAAQ,EAAE,KAAK;MACfH,WAAW,EAAE;IACf,CAAC;IACDI,UAAU,EAAE,CACV;MACEK,IAAI,EAAE,UAAU;MAChBC,IAAI,EAAE,QAAQ;MACdV,WAAW,EAAE,0GAA0G;MACvHG,QAAQ,EAAE;IACZ,CAAC,CACF;IACDE,QAAQ,EAAE;MACRC,MAAM,EAAE,GAAG;MACXN,WAAW,EAAE,gEAAgE;MAC7EO,OAAO,EAAE;QACPI,QAAQ,EAAE;MACZ;IACF,CAAC;IACDH,cAAc,EAAE,CACd;MAAEF,MAAM,EAAE,GAAG;MAAEN,WAAW,EAAE;IAAkD,CAAC,EAC/E;MAAEM,MAAM,EAAE,GAAG;MAAEN,WAAW,EAAE;IAAiC,CAAC;EAElE,CAAC,EACD;IACEF,MAAM,EAAE,KAAK;IACbC,IAAI,EAAE,SAAS;IACfC,WAAW,EAAE,sBAAsB;IACnCC,eAAe,EAAE,0JAA0J;IAC3KC,IAAI,EAAE;MACJC,QAAQ,EAAE,KAAK;MACfH,WAAW,EAAE;IACf,CAAC;IACDI,UAAU,EAAE,EAAE;IACdC,QAAQ,EAAE;MACRC,MAAM,EAAE,GAAG;MACXN,WAAW,EAAE,yBAAyB;MACtCO,OAAO,EAAE;QACPI,QAAQ,EAAE;MACZ;IACF,CAAC;IACDH,cAAc,EAAE,CACd;MAAEF,MAAM,EAAE,GAAG;MAAEN,WAAW,EAAE;IAA6C,CAAC;EAE9E,CAAC,CACF;EAED,oBACET,OAAA,CAAAE,SAAA;IAAAmB,QAAA,EACGf,SAAS,CAACgB,GAAG,CAAC,CAACC,QAAQ,EAAEC,KAAK,kBAC7BxB,OAAA,CAACF,YAAY;MAEXyB,QAAQ,EAAEA,QAAS;MACnBC,KAAK,EAAEA,KAAM;MACbpB,YAAY,EAAEA,YAAa;MAC3BC,eAAe,EAAEA;IAAgB,GAJ5B,GAAGkB,QAAQ,CAACf,IAAI,IAAIgB,KAAK,EAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAKjC,CACF;EAAC,gBACF,CAAC;AAEP,CAAC;AAACC,EAAA,GAtFI1B,UAAU;AAwFhB,eAAeA,UAAU;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}